Read the class MyList of generic type T in TemplateMyList.cs.
Note that this class implements IEnumerable<T>
and only provides the method Add to add an item.

Create a static class Processor.

Create a method Map that takes a MyList of type T and a function as parameters.
The function parameter has a value of type T as a parameter and returns a value of type U.
The method Map applies the function to each item in the MyList
and returns a new MyList with the results.

Create a method Filter that takes a MyList of type T and a function as parameters.
The function parameter has a value of type T as a parameter and returns a boolean.
The method Filter applies the function to each item in the MyList
and returns a new MyList with only the items for which the function returns true.

Create a method Reduce that takes a MyList of type T,
a function and an initial value of type U as parameters
and returns a value of type U.
The function parameter has values of type U and T as parameters and returns a value of type U.
The method Reduce first sets the intermediate result to the initial value.
Then method Reduce loops over each item in the MyList
and applies the function to the intermediate result and the current item
and sets the result to the intermediate result.
After the loop the method returns the result.
Hint 1: to compute the sum of a MyList of integers, you would write
Processor.Reduce(myList, (r, n) => r + n, 0)
Hint 2: to compute the minimum of a MyList of integers, you would write
Processor.Reduce(myList, (r, n) => Math.Min(r, n), int.MaxValue)

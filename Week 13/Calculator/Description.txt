        +-----+                       +-----+
        | '+' |                       | '*' |
        +--+--+                       +--+--+
           |                             |
      +----+----+                   +----+----+
      |         |                   |         |
   +--+--+   +--+--+             +--+--+   +--+--+
   | '2' |   | '*' |             | '+' |   | '4' |
   +-----+   +--+--+             +--+--+   +-----+
                |                   |
           +----+----+         +----+----+
           |         |         |         |
        +--+--+   +--+--+   +--+--+   +--+--+
        | '3' |   | '4' |   | '2' |   | '3' |
        +-----+   +-----+   +-----+   +-----+

The image above represents the expression '(2+(3*4))' and `((2+3)*4)` respectively.
The boxes/nodes '+' and '*' are operators and have a left and right subtree.
The boxes/nodes with numbers are operands and have no subtrees, only a value.

Create a class `Node` with an abstract method `Evaluate` without parameters that returns an `int`.

Create a class `Operand` that inherits from `Node`.
This class has a field `Value` that is set in the constructor.
The field can only be accessed in this class and is readonly.
Implement the `Evaluate` method that simply returns the value.
Override the `ToString` method that returns the value in the right way.

Create a class `Operator` that inherits from `Node`.
This class has two fields `Left` and `Right` of type `Node` that are set in the constructor.
The fields can only be accessed in this class and its subclasses and are readonly.

Create a class `Multiply` that inherits from `Operator`.
Add a constructor that has the same parameters as its parent class.
Override the method `Evaluate` that returns the product of the left and right nodes.
Hint: use recursion.
Override the method `ToString` that returns the string representation of the expression.
Do not include spaces (` `) and enclose the string in parentheses (`()`).
Hint: use recursion.

Create a class `Add` the same way as `Multiply`.
